# Generated by Django 5.1.4 on 2025-03-19 17:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('networked', 'Networked'), ('local', 'Local')], max_length=50)),
                ('player_count', models.IntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(4)])),
                ('map_style', models.CharField(choices=[('classic', 'Classic')], max_length=20)),
                ('powerups_enabled', models.BooleanField(default=False)),
                ('bots_enabled', models.BooleanField(default=False)),
                ('is_host', models.BooleanField(default=False)),
                ('spectator_enabled', models.BooleanField(default=True)),
                ('powerup_list', models.JSONField(blank=True, default=list)),
                ('player_sides', models.JSONField(default=list)),
                ('bot_sides', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('WAITING', 'Waiting for players'), ('IN_PROGRESS', 'Tournament in Progress'), ('COMPLETED', 'Tournament Completed')], default='WAITING', max_length=20)),
                ('is_tournament_game', models.BooleanField(default=False)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='game_rooms', to='game.gameconfig')),
                ('players', models.ManyToManyField(related_name='game_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchmakingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('QUEUED', 'In Queue'), ('MATCHED', 'Match Found'), ('CANCELLED', 'Cancelled')], default='QUEUED', max_length=20)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchmaking_queue', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('WAITING', 'Waiting for players'), ('IN_PROGRESS', 'Tournament in Progress'), ('COMPLETED', 'Tournament Completed')], default='WAITING', max_length=20)),
                ('max_participants', models.IntegerField(default=8)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tournaments', to='game.gameconfig')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tournament', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_number', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('final_score', models.IntegerField(blank=True, null=True)),
                ('side', models.CharField(blank=True, max_length=20)),
                ('is_ready', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_states', to='game.gameroom')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_states', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('game', 'player')},
            },
        ),
        migrations.CreateModel(
            name='TournamentParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('eliminated', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_participant', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='game.tournamentroom')),
            ],
            options={
                'unique_together': {('tournament', 'player')},
            },
        ),
        migrations.CreateModel(
            name='TournamentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matches_played', models.IntegerField(default=0)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_scores', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_scores', to='game.tournamentroom')),
            ],
            options={
                'unique_together': {('tournament', 'player')},
            },
        ),
        migrations.CreateModel(
            name='TournamentMatch',
            fields=[
                ('gameroom_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='game.gameroom')),
                ('round_number', models.IntegerField(default=0)),
                ('match_number', models.IntegerField(default=0)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_matches', to='game.tournamentroom')),
            ],
            options={
                'unique_together': {('tournament', 'round_number', 'match_number')},
            },
            bases=('game.gameroom',),
        ),
    ]
